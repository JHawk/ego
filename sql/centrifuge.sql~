SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;
SET search_path = public, pg_catalog;
SET default_tablespace = '';
SET default_with_oids = false;

--------------------------------------------------------------------------------
--
-- Accounts

CREATE SEQUENCE accounts_primary_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;

CREATE TABLE accounts (
    id bigint DEFAULT nextval(('accounts_primary_seq'::text)::regclass) NOT NULL,
    email text NOT NULL,
    password text NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    is_admin boolean DEFAULT false NOT NULL,
    registration_timestamp timestamp without time zone DEFAULT 'now' NOT NULL,
    last_login_timestamp timestamp without time zone DEFAULT 'now' NOT NULL,
    CONSTRAINT id_primary PRIMARY KEY (id)
);

CREATE INDEX accounts_id_idx ON accounts USING btree (id);

--------------------------------------------------------------------------------
--
-- Friends

CREATE TABLE friends (
    first_id bigint NOT NULL,
    second_id bigint NOT NULL,
    registration_date timestamp without time zone DEFAULT 'now' NOT NULL,
    CHECK (first_id < second_id),
    CONSTRAINT friends_primary_key PRIMARY KEY (first_id, second_id),
    CONSTRAINT friends_first_id_foreign FOREIGN KEY (first_id) REFERENCES accounts(id),
    CONSTRAINT friends_second_id_foreign FOREIGN KEY (second_id) REFERENCES accounts(id)
);

CREATE INDEX friends_first_id_idx ON friends USING btree (first_id);
CREATE INDEX friends_second_id_idx ON friends USING btree (second_id);

--------------------------------------------------------------------------------
--
-- Messages

CREATE SEQUENCE messages_primary_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;

CREATE TABLE messages (
    id bigint DEFAULT nextval(('messages_primary_seq'::text)::regclass) NOT NULL,
    sender_id bigint NOT NULL,
    recip_id bigint NOT NULL,
    message text NOT NULL,
    sent_timestamp timestamp without time zone DEFAULT 'now' NOT NULL,
    CONSTRAINT messages_primary_key PRIMARY KEY (id),
    CONSTRAINT messages_sender_id_foreign FOREIGN KEY (sender_id) REFERENCES accounts(id),
    CONSTRAINT messages_recip_id_foreign FOREIGN KEY (recip_id) REFERENCES accounts(id)
);

CREATE INDEX messages_sender_id_idx ON messages USING btree (sender_id);
CREATE INDEX messages_recip_id_idx ON messages USING btree (recip_id);

--------------------------------------------------------------------------------
--
-- Bands

CREATE SEQUENCE bands_primary_seq
    INCREMENT BY 1
    NO MAXVALUE
    MINVALUE 0
    CACHE 1;

CREATE TABLE bands (
    id integer DEFAULT nextval(('bands_primary_seq'::text)::regclass) NOT NULL,
    name text NOT NULL,
    manager_id bigint NOT NULL,
    registration_timestamp timestamp without time zone DEFAULT 'now' NOT NULL,
    CONSTRAINT bands_primary_key PRIMARY KEY (id),
    CONSTRAINT bands_manager_id FOREIGN KEY (manager_id) REFERENCES accounts(id)
);

CREATE INDEX bands_id_idx ON bands USING btree (id);

--------------------------------------------------------------------------------
--
-- Songs

CREATE SEQUENCE songs_primary_seq
    INCREMENT BY 1
    NO MAXVALUE
    MINVALUE 0
    CACHE 1;

CREATE TABLE songs (
    id bigint DEFAULT nextval(('songs_primary_seq'::text)::regclass) NOT NULL,
    title text NOT NULL,
    band_id integer NOT NULL,
    registration_timestamp timestamp without time zone DEFAULT 'now' NOT NULL,
    CONSTRAINT songs_primary_key PRIMARY KEY (id)
);

CREATE INDEX songs_id_idx ON songs USING btree (id);

--------------------------------------------------------------------------------
--
-- Listening_History

CREATE SEQUENCE listening_history_primary_seq
    INCREMENT BY 1
    NO MAXVALUE
    MINVALUE 0
    CACHE 1;

CREATE TABLE listening_history (
    id bigint DEFAULT nextval(('listening_history_primary_seq'::text)::regclass) NOT NULL,
    account_id bigint NOT NULL,
    song_id integer NOT NULL,
    recommendation_method text,
    registration_timestamp timestamp without time zone DEFAULT 'now' NOT NULL,
    CONSTRAINT listening_history_primary_key PRIMARY KEY (id)
);

CREATE INDEX listening_history_id_idx ON listening_history USING btree (id);

--------------------------------------------------------------------------------
--
-- Tags

CREATE SEQUENCE tags_primary_seq
    INCREMENT BY 1
    NO MAXVALUE
    MINVALUE 0
    CACHE 1;

CREATE TABLE tags (
    id integer DEFAULT nextval(('tags_primary_seq'::text)::regclass) NOT NULL,
    name text NOT NULL,
    CONSTRAINT tags_primary_key PRIMARY KEY (id)
);

CREATE INDEX tags_id_idx ON tags USING btree (id);

--------------------------------------------------------------------------------
--
-- Songs_Tags

CREATE TABLE songs_tags (
    song_id bigint NOT NULL,
    tag_id integer NOT NULL,
    CONSTRAINT songs_tags_primary_key PRIMARY KEY (song_id, tag_id),
    CONSTRAINT songs_tags_song_id_foreign FOREIGN KEY (song_id) REFERENCES songs(id),
    CONSTRAINT songs_tags_tag_id_foreign FOREIGN KEY (tag_id) REFERENCES tags(id)
);

CREATE INDEX songs_tags_song_id_idx ON songs_tags USING btree (song_id);
CREATE INDEX songs_tags_tag_id_idx ON songs_tags USING btree (tag_id);

--------------------------------------------------------------------------------
--
-- Bands_Tags

CREATE TABLE bands_tags (
    band_id integer NOT NULL,
    tag_id integer NOT NULL,
    CONSTRAINT bands_tags_primary_key PRIMARY KEY (band_id, tag_id),
    CONSTRAINT bands_tags_song_id_foreign FOREIGN KEY (band_id) REFERENCES bands(id),
    CONSTRAINT bands_tags_tag_id_foreign FOREIGN KEY (tag_id) REFERENCES tags(id)
);

CREATE INDEX bands_tags_song_id_idx ON bands_tags USING btree (band_id);
CREATE INDEX bands_tags_tag_id_idx ON bands_tags USING btree (tag_id);

--------------------------------------------------------------------------------
--
-- Teardown

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;

